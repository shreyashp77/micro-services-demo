services:

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    env_file:
      - ./api-gateway/.env
    ports:
      - "8080:8080"
    networks:
      - microservice-network
    depends_on:
      - auth-service
      - product-service
      - user-service
      - order-service

  auth-service:
    build: ./auth-service
    container_name: auth-service
    env_file:
      - ./auth-service/.env
    ports:
      - "9000:9000"
    networks:
      - microservice-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:${DB_PORT}/${AUTH_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${AUTH_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${AUTH_DB_PASSWORD}
    depends_on:
      auth-db:
        condition: service_healthy

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "9001:9001"
    networks:
      - microservice-network
    restart: on-failure:3  # Retry up to 3 times
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-db:${DB_PORT}/${PRODUCT_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${PRODUCT_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PRODUCT_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CACHE_TYPE: ${SPRING_CACHE_TYPE}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      SPRING_DATA_REDIS_TIMEOUT: ${REDIS_CACHE_TTL}
      SPRING_DATA_REDIS_CONNECT_TIMEOUT: ${SPRING_DATA_REDIS_CONNECT_TIMEOUT}
    depends_on:
      product-db:
        condition: service_healthy
      auth-service:
        condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "9002:9002"
    networks:
      - microservice-network
    restart: on-failure:3  # Retry up to 3 times
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:${DB_PORT}/${USER_DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CACHE_TYPE: ${SPRING_CACHE_TYPE}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      SPRING_DATA_REDIS_TIMEOUT: ${REDIS_CACHE_TTL}
      SPRING_DATA_REDIS_CONNECT_TIMEOUT: ${SPRING_DATA_REDIS_CONNECT_TIMEOUT}
    depends_on:
      user-db:
        condition: service_healthy
      auth-service:
        condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "9003:9003"
    networks:
      - microservice-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      auth-service:
        condition: service_started
      kafka:
        condition: service_healthy

  user-db:
    image: postgres:18
    container_name: user-db
    ports:
      - "54322:${DB_PORT}"
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      TZ: Asia/Kolkata
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USERNAME} -d ${USER_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - user_pgdata:/var/lib/postgresql/data

  product-db:
    image: postgres:18
    container_name: product-db
    ports:
      - "54321:${DB_PORT}"
    environment:
      POSTGRES_DB: ${PRODUCT_DB_NAME}
      POSTGRES_USER: ${PRODUCT_DB_USERNAME}
      POSTGRES_PASSWORD: ${PRODUCT_DB_PASSWORD}
      TZ: Asia/Kolkata
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRODUCT_DB_USERNAME} -d ${PRODUCT_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - product_pgdata:/var/lib/postgresql/data

  auth-db:
    image: postgres:18
    container_name: auth-db
    ports:
      - "54320:${DB_PORT}"
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USERNAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      TZ: Asia/Kolkata
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USERNAME} -d ${AUTH_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - auth_pgdata:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - microservice-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - microservice-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10
  
  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s  # Give Redis time to fully initialize

networks:
  microservice-network:
    driver: bridge

volumes:
  user_pgdata:
  product_pgdata:
  auth_pgdata:
  redis-data: